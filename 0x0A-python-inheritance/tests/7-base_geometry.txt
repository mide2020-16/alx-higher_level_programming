>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> obj = BaseGeometry()

>>> obj.integer_validator("width", "5")
Traceback (most recent call last):
...
TypeError: width must be an integer

>>> obj.integer_validator("width", 5)


>>> obj.integer_validator("width", -2)
Traceback (most recent call last):
...
ValueError: width must be greater than 0

>>> obj.integer_validator("width", True)
Traceback (most recent call last):
...
TypeError: width must be an integer

>>> obj.integer_validator("width", [1,3,4])
Traceback (most recent call last):
...
TypeError: width must be an integer

>>> obj.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> obj.integer_validator("width", {3})
Traceback (most recent call last):
...
TypeError: width must be an integer

>>> obj.integer_validator("width", [4])
Traceback (most recent call last):
...
TypeError: width must be an integer

>>> obj.integer_validator("width", None)
Traceback (most recent call last):
...
TypeError: width must be an integer

>>> obj.integer_validator("width")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> obj.integer_validator("width", (4,))
Traceback (most recent call last):
...
TypeError: width must be an integer

>>> obj.integer_validator("width", 0)
Traceback (most recent call last):
...
ValueError: width must be greater than 0

>>> obj.area()
Traceback (most recent call last):
...
Exception: area() is not implemented